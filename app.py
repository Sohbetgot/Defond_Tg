import telebot
from telebot import types
import time
import threading

TOKEN = '7660064921:AAHAl0-wL7q5eGgHFlyPCMgW6ow1u4cS1f4'  # Bot tokeni≈àizi ≈üu √Ωere go√Ωu≈à
bot = telebot.TeleBot(TOKEN)

# Admin a√ßar s√∂zi
ADMIN_PASSWORD = "ADNƒ∞OBERTƒ∞61"
admins = set()  # ≈üu wagtky sessi√Ωadaky adminler

# Sponsor kanallar (duwme g√∂rn√º≈üinde g√∂rkeziler)
SPONSOR_CHANNELS = [
    ("KANAL 1 ‚úÖ", "https://t.me/DM_SERVERS"),
    ("KANAL 2 ‚úÖ", "https://t.me/DM_404CHAT"),
]

# VPN kodlar (bazasy)
vpn_codes = []  # [{"code": "ABC123", "used": False}]

# Ulanyjy maglumatlary: user_id -> dict
users = {}

# Awto poster √º√ßin
auto_post_interval = 0
auto_post_texts = []
auto_post_running = False

# Spam goragy
user_message_times = {}

# Men√º √Ωazgy (√º√Ωtgedip bol√Ωar admin panelde)
menu_text = ("üëãüèª Ho≈ü Geldi≈àiz, @{username}!\n\n"
             "üì¢ VPN kodyny almak √º√ßin a≈üakdaky kanallara agza bolu≈à:")


# === K√∂mek√ßi Funksi√Ωalar ===

def make_subscribe_buttons():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for name, link in SPONSOR_CHANNELS:
        markup.add(types.InlineKeyboardButton(text=name, url=link))
    return markup

def check_subscription(user_id):
    # API √ß√§klendirmesi seb√§pli ≈üu wagt hemme ulanyjyny agza kabul ed√Ω√§ris
    return users.get(user_id, {}).get("subscribed", False)

def mark_vpn_code_used(code):
    for item in vpn_codes:
        if item["code"] == code and not item["used"]:
            item["used"] = True
            return True
    return False

def get_free_vpn_code():
    for item in vpn_codes:
        if not item["used"]:
            return item["code"]
    return None

def is_spam(user_id):
    now = time.time()
    times = user_message_times.get(user_id, [])
    times = [t for t in times if now - t < 10]
    user_message_times[user_id] = times
    if len(times) >= 5:
        return True
    times.append(now)
    user_message_times[user_id] = times
    return False

def send_subscription_menu(chat_id):
    text = ("üëãüèª Ho≈ü geldi≈àiz!\n\n"
            "VPN kodyny almak √º√ßin a≈üakdaky kanallara agza bolu≈à:\n")
    bot.send_message(chat_id, text, reply_markup=make_subscribe_buttons())

def is_admin(user_id):
    return user_id in admins

def main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Agza Boldum", "VPN Kodumy Al", "Admin Panel")
    return markup

# Awto poster √º√ßin funksi√Ωa
def auto_post_worker():
    global auto_post_running
    while auto_post_running:
        if auto_post_interval > 0 and auto_post_texts:
            for post_text in auto_post_texts:
                # Bu √Ωere kanaly≈à ID-sini go√Ωu≈à √Ωa-da islendik kanala ugradyp bilersi≈àiz
                # Mysal √º√ßin: bot.send_message(CHANNEL_ID, post_text)
                print(f"Awto post: {post_text}")  # di≈àe konsola √Ωazmak
                time.sleep(auto_post_interval)
        else:
            time.sleep(5)

def start_auto_post():
    global auto_post_running
    if not auto_post_running:
        auto_post_running = True
        threading.Thread(target=auto_post_worker, daemon=True).start()

def stop_auto_post():
    global auto_post_running
    auto_post_running = False

# === Komandalar we habarlara i≈üje≈àlikler ===

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or "Ulanyjy"
    users.setdefault(user_id, {"username": username, "subscribed": False, "vpn_code": None, "is_admin": False})

    if not check_subscription(user_id):
        send_subscription_menu(user_id)
    else:
        text = menu_text.format(username=username)
        bot.send_message(user_id, text, reply_markup=main_menu_keyboard())

@bot.message_handler(commands=['admin'])
def admin_login(message):
    user_id = message.chat.id
    msg = bot.send_message(user_id, "Admin paneline girmek √º√ßin a√ßar s√∂z√ºni √Ωazy≈à:")
    bot.register_next_step_handler(msg, process_admin_password)

def process_admin_password(message):
    user_id = message.chat.id
    text = message.text.strip()
    if text == ADMIN_PASSWORD:
        admins.add(user_id)
        users[user_id]["is_admin"] = True
        bot.send_message(user_id, "üéâ Admin paneline √ºst√ºnlikli girdi≈àiz!")
        show_admin_panel(user_id)
    else:
        bot.send_message(user_id, "‚ùå √ùal≈ày≈ü a√ßar s√∂z. Admin paneline girmek m√ºmkin d√§l.")

def show_admin_panel(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        "VPN Kodlary Dolandyrmak",
        "Men√Ωu √ú√Ωtgetmek",
        "Bildiri≈ü Ugratmak",
        "Ulanyjylar",
        "Awto Poster",
        "Admin Go≈ümak / A√Ωyrmak",
        "Bot Sazlamalary",
        "√áykmak"
    )
    bot.send_message(user_id, "Admin panel:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "√áykmak")
def admin_logout(message):
    user_id = message.chat.id
    if user_id in admins:
        admins.remove(user_id)
        users[user_id]["is_admin"] = False
    bot.send_message(user_id, "Admin panelinden √ßykdy≈àyz.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "VPN Kodlary Dolandyrmak")
def vpn_code_management(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    text = "VPN kodlaryny go≈ümak √º√ßin, kodlary hatara her setirde bir kod bolup girizi≈à:"
    msg = bot.send_message(user_id, text)
    bot.register_next_step_handler(msg, add_vpn_codes)

def add_vpn_codes(message):
    user_id = message.chat.id
    lines = message.text.strip().split("\n")
    added = 0
    for line in lines:
        code = line.strip()
        if code and not any(item["code"] == code for item in vpn_codes):
            vpn_codes.append({"code": code, "used": False})
            added += 1
    bot.send_message(user_id, f"√úst√ºnlikli {added} sany VPN kody go≈üuldy.")

@bot.message_handler(func=lambda m: m.text == "Men√Ωu √ú√Ωtgetmek")
def menu_edit(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    text = "T√§ze men√Ωu √Ωazgyny √Ωazy≈à (Ulanyjy adyny `{username}` h√∂km√ºnde go√Ωu≈à):"
    msg = bot.send_message(user_id, text)
    bot.register_next_step_handler(msg, save_menu_text)

def save_menu_text(message):
    global menu_text
    user_id = message.chat.id
    new_text = message.text
    menu_text = new_text
    bot.send_message(user_id, "Men√Ωu √Ωazgy √ºst√ºnlikli √º√Ωtgedildi.")

@bot.message_handler(func=lambda m: m.text == "Bildiri≈ü Ugratmak")
def start_broadcast(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    msg = bot.send_message(user_id, "Ugratjak habary≈àyzy √Ωazy≈à:")
    bot.register_next_step_handler(msg, send_broadcast)

def send_broadcast(message):
    text = message.text
    sent_count = 0
    for user_id in users.keys():
        try:
            bot.send_message(user_id, text)
            sent_count += 1
            time.sleep(0.05)
        except Exception:
            pass
    bot.send_message(message.chat.id, f"Bildiri≈ü {sent_count} adama ugradylyldy.")

@bot.message_handler(func=lambda m: m.text == "Ulanyjylar")
def user_list(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    count = len(users)
    bot.send_message(user_id, f"Ulanyjy sany: {count}")

@bot.message_handler(func=lambda m: m.text == "Awto Poster")
def auto_poster_settings(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    text = ("Awto poster sazlamalary:\n"
            "1. Post go≈ümak: 'Post go≈ü'\n"
            "2. Postlary g√∂rmek: 'Postlary g√∂rkez'\n"
            "3. Postlary √∂√ß√ºrmek: 'Postlary arassala'\n"
            "4. Aralyk (sekundda): 'Aralyk <sekund>'\n
    # Awto poster sazlamalary (dowam)
@bot.message_handler(func=lambda m: m.text == "Post go≈ü")
def add_auto_post(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    msg = bot.send_message(user_id, "Go≈ümak isle√Ω√§n postu≈àyzy √Ωazy≈à:")
    bot.register_next_step_handler(msg, save_auto_post)

def save_auto_post(message):
    text = message.text
    auto_post_texts.append(text)
    bot.send_message(message.chat.id, "Post awto poster √º√ßin go≈üuldy.")

@bot.message_handler(func=lambda m: m.text == "Postlary g√∂rkez")
def show_auto_posts(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    if not auto_post_texts:
        bot.send_message(user_id, "Hi√ß hili post √Ωok.")
        return
    text = "Awto poster postlary:\n\n" + "\n\n".join(f"{i+1}. {p}" for i,p in enumerate(auto_post_texts))
    bot.send_message(user_id, text)

@bot.message_handler(func=lambda m: m.text == "Postlary arassala")
def clear_auto_posts(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    auto_post_texts.clear()
    bot.send_message(user_id, "Awto poster postlary arassalandy.")

@bot.message_handler(func=lambda m: m.text.startswith("Aralyk"))
def set_auto_post_interval(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    try:
        seconds = int(message.text.split()[1])
        global auto_post_interval
        auto_post_interval = seconds
        bot.send_message(user_id, f"Awto poster aralygy {seconds} sekunt boldy.")
        start_auto_post()
    except:
        bot.send_message(user_id, "Dogry san girizi≈à: Meselem: Aralyk 60")

# Agza Boldum d√ºwmesi √º√ßin
@bot.message_handler(func=lambda m: m.text == "Agza Boldum")
def agza_boldum_handler(message):
    user_id = message.chat.id
    # Elbetde, hakykatdan kanal agzalygy barlanmaly. H√§zirki wagtda simul√Ωasi√Ωa.
    users[user_id]["subscribed"] = True
    bot.send_message(user_id, "üëèüèº Siz kanallara √ºst√ºnlikli agza boldu≈àyz! Indi VPN koduny alyp bilersi≈àiz.")

# VPN Kodumy Al d√ºwmesine basylanda
@bot.message_handler(func=lambda m: m.text == "VPN Kodumy Al")
def give_vpn_code(message):
    user_id = message.chat.id
    if not users.get(user_id, {}).get("subscribed", False):
        send_subscription_menu(user_id)
        return
    code = get_free_vpn_code()
    if code:
        mark_vpn_code_used(code)
        users[user_id]["vpn_code"] = code
        bot.send_message(user_id, f"üéâ Sizi≈à VPN kody≈àyz: {code}\n#Hyzmat √º√ßin sag bolu≈à!")
    else:
        bot.send_message(user_id, "Gynansak-da, el√Ωeterli VPN kodlary gutardy. Administrator bilen habarla≈üy≈à.")

# Admin go≈ümak / a√Ωyrmak
@bot.message_handler(func=lambda m: m.text == "Admin Go≈ümak / A√Ωyrmak")
def admin_add_remove_menu(message):
    user_id = message.chat.id
    if not is_admin(user_id):
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("Admin Go≈ü", "Admin A√Ωyr", "Yza", "√áykmak")
    msg = bot.send_message(user_id, "N√§me isle√Ω√§rsi≈àiz?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_admin_add_remove)

def process_admin_add_remove(message):
    user_id = message.chat.id
    text = message.text
    if text == "Admin Go≈ü":
        msg = bot.send_message(user_id, "Go≈ümak isle√Ω√§n admini≈à user_id-ni girizi≈à:")
        bot.register_next_step_handler(msg, add_admin_by_id)
    elif text == "Admin A√Ωyr":
        msg = bot.send_message(user_id, "A√Ωyrmak isle√Ω√§n admini≈à user_id-ni girizi≈à:")
        bot.register_next_step_handler(msg, remove_admin_by_id)
    elif text == "Yza":
        show_admin_panel(user_id)
    else:
        bot.send_message(user_id, "Ba≈üga zat talap edilmedi.")

def add_admin_by_id(message):
    user_id = message.chat.id
    try:
        new_admin_id = int(message.text)
        admins.add(new_admin_id)
        if new_admin_id not in users:
            users[new_admin_id] = {"username": None, "subscribed": False, "vpn_code": None, "is_admin": True}
        else:
            users[new_admin_id]["is_admin"] = True
        bot.send_message(user_id, f"Ulanyjy {new_admin_id} admin h√∂km√ºnde go≈üuldy.")
    except:
        bot.send_message(user_id, "User_id doly san bolmaly.")

def remove_admin_by_id(message):
    user_id = message.chat.id
    try:
        rem_admin_id = int(message.text)
        if rem_admin_id in admins:
            admins.remove(rem_admin_id)
            if rem_admin_id in users:
                users[rem_admin_id]["is_admin"] = False
            bot.send_message(user_id, f"Ulanyjy {rem_admin_id} adminlykdan a√Ωryldy.")
        else:
            bot.send_message(user_id, "Bu ulanyjy admin d√§l.")
    except:
        bot.send_message(user_id, "User_id doly san bolmaly.")

# Her gezek ulanyjy /start √Ωazylanda √Ωa-da ba≈üda i≈üledi
@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    user_id = message.chat.id
    if is_spam(user_id):
        bot.send_message(user_id, "üí¢ K√∂p habar √Ωazma≈à, wagt beri≈à.")
        return

    text = message.text.lower()
    if text == "agza boldum":
        agza_boldum_handler(message)
    elif text == "vpn kodumy al":
        give_vpn_code(message)
    elif text == "admin panel":
        if users.get(user_id, {}).get("is_admin"):
            show_admin_panel(user_id)
        else:
            bot.send_message(user_id, "Admin d√§l.")
    else:
        bot.send_message(user_id, "N√§me isle√Ω√§ndigi≈àizi d√º≈ü√ºndirip bilersi≈àizmi?")

# Bot i≈üledil√Ω√§r
print("Bot i≈ül√§p ba≈ülady...")
bot.infinity_polling()
